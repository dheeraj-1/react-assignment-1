{"version":3,"sources":["UserInput/UserInput.js","UserOutput/UserOutput.js","hoc/Auxiliary/Auxiliary.js","hoc/Wrapper/Wrapper.js","App.js","serviceWorker.js","index.js"],"names":["UserInput","props","className","type","value","username","onChange","changeHandler","UserOutput","onClick","e","clicked","children","href","Auxiliary","Wrapper","WrappedComponent","data","secondData","this","wrappedMsg","Component","ListItem","item","term","description","Glossary","items","map","key","id","WrappedParcel","message","SecondWrappedParcel","App","state","persons","showHeader","userInputHandler","event","console","log","target","setState","userOutputClickedHandler","parcelRef1","React","createRef","arguments","style","ref","alert","current","flag","person","nextProps","nextState","preProps","prevProps","snapshot","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.3b3d9925.chunk.js","sourcesContent":["import React from 'react';\r\nimport './UserInput.css';\r\n\r\nconst UserInput = (props) => {\r\n    return (\r\n        <div className=\"UserInput\">\r\n            UserInput Component: <input type=\"text\" value={props.username} onChange= {props.changeHandler}></input>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default UserInput;","import React from 'react';\r\nimport './UserOutput.css';\r\n\r\nconst UserOutput = (props) => {\r\n    return (\r\n        <div className=\"UserOutput\" onClick={(e) => props.clicked(props.username, e)}>\r\n            <h2>{props.username + (props.children? props.children : '')}</h2>\r\n            <p>Garrets because elderly new manners however one village she. </p>\r\n            <p>Is at purse tried jokes china ready decay an. </p>\r\n            <nav>\r\n                <a href=\"\">Author</a>\r\n                <a href=\"\">Books</a>\r\n            </nav>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default UserOutput;","const Auxiliary = (props) => props.children;\r\n\r\nexport default Auxiliary;","import React, { Component } from 'react';\r\nimport Auxiliary from '../Auxiliary/Auxiliary';\r\n\r\nconst Wrapper = (WrappedComponent, data, secondData) => {\r\n    return class extends Component {\r\n        render() {\r\n            return (\r\n                <Auxiliary>\r\n                    <WrappedComponent \r\n                        {...this.props}\r\n                        wrappedMsg={data}\r\n                    />\r\n                    <p>{secondData}</p>\r\n                </Auxiliary>\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nexport default Wrapper;","import React, { Component, Fragment } from 'react';\nimport './App.css';\nimport UserInput from './UserInput/UserInput';\nimport UserOutput from './UserOutput/UserOutput';\nimport Auxiliary from './hoc/Auxiliary/Auxiliary';\nimport Wrapper from './hoc/Wrapper/Wrapper';\n\n\nconst parcel = (props) => {\n  return (\n    <div>\n      <h1>{props.wrappedMsg}</h1>\n      <p>{props.message}</p>\n    </div>\n  )\n}\nconst secondParcel = (props) => {\n  return (\n    <Auxiliary>\n      <h3>{props.wrappedMsg}</h3>\n      <h4>{props.message}</h4>\n    </Auxiliary>\n  )\n}\nfunction ListItem({ item }) {\n  return (\n    <Fragment>\n      <dt>{item.term}</dt>\n      <dd>{item.description}</dd>\n    </Fragment>\n  );\n}\n\nfunction Glossary(props) {\n  return (\n    <dl>\n      {props.items.map(item => (\n        <ListItem item={item} key={item.id} />\n      ))}\n    </dl>\n  );\n}\n\nconst WrappedParcel = Wrapper(parcel, 'data passed', 'second data passed');\nconst SecondWrappedParcel = Wrapper(secondParcel, 'second parcel', 'content for second parcel');\n\nclass App extends Component {\n\n  state = {\n    username: \"Dheeraj\",\n    persons: [\n      \"Shivam\",\n      \"Saurabh\",\n      \"Anita\",\n      \"Rashmi\"\n    ],\n    showHeader: true\n  }\n\n  constructor(props) {\n    super(props);\n    console.log('[App.js] constructor');\n    this.parcelRef1 = React.createRef();\n  }\n  static getDerivedStateFromProps(props, state) {\n    console.log('[App.js] getDerivedStateFromProps', props, state, arguments);\n    return state;\n  }\n\n  render() {\n    console.log('[App.js] render', arguments);\n    const style = {\n      \"textDecoration\": \"underline\"\n    };\n    return (\n      //Shown use of a higher-order component, which allow us to return more than one JSX element at root.\n      <Auxiliary>\n        <h3>I am an added component, just to show usage of returning more than one JSX component at root</h3>\n        <div>Hello, Hi, Hello </div>\n        <Glossary items={[{term:1, description:'first item', key:1},\n      {term:2, description:'second item', key:2},\n      {term:3, description:'third item', key:3}]}></Glossary>\n        <div>\n        <input type='text' ref={this.parcelRef1}></input>\n        <button onClick={() => alert('buttonclicked  '+ this.parcelRef1.current.value)}>click me to check ref</button>\n        <p>{this.parcelRef1.current ? this.parcelRef1.current.value : \"\"}</p>\n        </div>\n        <WrappedParcel message='kjfdnndlk'></WrappedParcel>\n        <SecondWrappedParcel message='I am second parcel'></SecondWrappedParcel>\n        <div className=\"App\">\n          <button onClick={() => {\n            let flag = this.state.showHeader;\n            this.setState({showHeader: !flag});\n          }}>Toggle Header</button>\n          {this.state.showHeader ? <h1>This is react app!</h1> : null}\n          <h2  style={style}>Assignment 1</h2>\n          <UserInput changeHandler = {this.userInputHandler} username={this.state.username}></UserInput>\n          <UserOutput username = { this.state.username} key=\"first\" clicked={this.userOutputClickedHandler}></UserOutput>\n          <UserOutput username = { this.state.username} key=\"second\" clicked={this.userOutputClickedHandler}></UserOutput>\n\n          {this.state.persons.map((person) => {\n            return <UserOutput username = {person} key = {person} clicked={this.userOutputClickedHandler}></UserOutput>\n          })}\n      </div>\n      </Auxiliary>\n     /* <div className=\"App\">\n        <button onClick={() => {\n          let flag = this.state.showHeader;\n          this.setState({showHeader: !flag});\n        }}>Toggle Header</button>\n        {this.state.showHeader ? <h1>This is react app!</h1> : null}\n        <h2  style={style}>Assignment 1</h2>\n        <UserInput changeHandler = {this.userInputHandler} username={this.state.username}></UserInput>\n        <UserOutput username = { this.state.username} key=\"first\" clicked={this.userOutputClickedHandler}></UserOutput>\n        <UserOutput username = { this.state.username} key=\"second\" clicked={this.userOutputClickedHandler}></UserOutput>\n\n        {this.state.persons.map((person) => {\n          return <UserOutput username = {person} key = {person} clicked={this.userOutputClickedHandler}></UserOutput>\n        })}\n      </div> */\n    );\n  }\n  componentDidMount() {\n    console.log('[App.js] componentDidMount', arguments);\n  }\n  //Must return a value. for now just returning true\n  shouldComponentUpdate(nextProps, nextState) {\n    console.log('[App.js] shouldComponentUpdate', arguments);\n    return true;\n  }\n  //Must return a snapshot .\n  getSnapshotBeforeUpdate(preProps, nextProps) {\n    console.log('[App.js] getSnapshotBeforeUpdate', arguments);\n    return true;\n  }\n  componentDidUpdate(prevProps, nextProps, snapshot) {\n    console.log('[App.js] componentDidUpdate', arguments);\n  }\n\n  userInputHandler = (event) => {\n    console.log('User input' + event.target.value);\n    this.setState({username: event.target.value});\n  }\n\n  userOutputClickedHandler = (event) => {\n    console.log('User output component clicked',event);\n  }\n}\n\nexport default App;\n\n\n/* var obj = {bread:2, meat:2, salad:3, cheese:1};\nvar arr = Object.keys(obj).map(function(key) {\n    console.log(obj[key], obj.key, [...Array(obj[key])]);\n    return ([...Array(obj[key])].map(function(_, i) {\n        console.log(arguments, i);\n        return key+i;\n}))\n});\nconsole.log(arr); */\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}